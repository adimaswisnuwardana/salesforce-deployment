name: Salesforce Deployment

on:
  pull_request_target:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0  # needed so we can diff against base branch

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Salesforce CLI (new sf)
        run: npm install --global @salesforce/cli

      - name: Parse PR Body
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.pull_request.body || "";

            function match(key, fallback="") {
              const regex = new RegExp(key + ":\\s*(.+)", "i");
              const match = body.match(regex);
              return match ? match[1].trim() : fallback;
            }

            const token = match("token");
            if (!token) throw new Error("‚ùå Missing 'token' in PR body");

            core.setOutput("token", token);
            core.setOutput("target", match("target", "sandbox"));
            core.setOutput("testlevel", match("testlevel", "NoTestRun"));
            core.setOutput("testclass", match("testclass", ""));

      - name: Fetch Auth URL from Cloudflare Worker
        id: auth
        run: |
          echo "üîë Fetching AuthURL from middleware..."
          AUTHURL=$(curl -s https://salesforce-deployment-middleware.wisnuwardana-adimas.workers.dev/auth/${{ steps.parse.outputs.token }} | jq -r '.authUrl')
          if [ -z "$AUTHURL" ] || [ "$AUTHURL" == "null" ]; then
            echo "‚ùå Auth URL not returned by middleware"
            exit 1
          fi
          echo "$AUTHURL" > authurl.txt
          sf org login sfdx-url --sfdx-url-file authurl.txt --alias target --set-default

      - name: Deploy only changed components
        run: |
          TESTLEVEL="${{ steps.parse.outputs.testlevel }}"
          TESTCLASS="${{ steps.parse.outputs.testclass }}"

          echo "üöÄ Deploying with test level: $TESTLEVEL"

          # Fetch base branch so we can diff
          git fetch origin ${{ github.base_ref }} --depth=1

          echo "üîç Changed files in PR (full list):"
          git diff --name-only origin/${{ github.base_ref }} HEAD

          # Only take files under force-app
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} HEAD -- "force-app/**")

          if [ -z "$CHANGED_FILES" ]; then
            echo "‚ö†Ô∏è No metadata changes found in this PR."
            exit 0
          fi

          echo "üìÇ Files to deploy:"
          echo "$CHANGED_FILES"

          if [ "$TESTLEVEL" = "RunSpecifiedTests" ] && [ -n "$TESTCLASS" ]; then
            sf project deploy start --ignore-conflicts --wait 10 \
              --test-level RunSpecifiedTests \
              --tests "$TESTCLASS" \
              --source-dir $CHANGED_FILES
          else
            sf project deploy start --ignore-conflicts --wait 10 \
              --test-level "$TESTLEVEL" \
              --source-dir $CHANGED_FILES
          fi

      - name: Comment on PR
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: "üöÄ Deployment Success! PR closed automatically."
            })
